import { router } from 'expo-router';
import { ApiException } from '../services/api';
import { isTokenExpired } from './jwtUtils';

export interface AuthErrorHandlerOptions {
  logout: () => Promise<void>;
  redirectTo?: string;
  showModal?: boolean;
}

// Funci√≥n para manejar errores de autenticaci√≥n de manera consistente
export async function handleAuthError(
  error: any,
  options: AuthErrorHandlerOptions
): Promise<boolean> {
  const { logout, redirectTo = '/login', showModal = false } = options;

  // Si es un error de API con c√≥digo 401
  if (error instanceof ApiException && error.status === 401) {
    console.log('üîê Error 401 detectado: Token inv√°lido o expirado');
    
    try {
      await logout();
      console.log('‚úÖ Sesi√≥n cerrada exitosamente');
      
      if (showModal) {
        // Aqu√≠ podr√≠as mostrar un modal si fuera necesario
        console.log('üì± Mostrando modal de sesi√≥n expirada');
      }
      
      router.replace(redirectTo);
      return true; // Indica que se manej√≥ el error de autenticaci√≥n
    } catch (logoutError) {
      console.error('‚ùå Error cerrando sesi√≥n:', logoutError);
      router.replace(redirectTo);
      return true;
    }
  }

  return false; // No era un error de autenticaci√≥n
}

// Funci√≥n para verificar y manejar tokens expirados proactivamente
export async function checkAndHandleExpiredToken(
  token: string,
  options: AuthErrorHandlerOptions
): Promise<boolean> {
  if (isTokenExpired(token)) {
    console.log('‚ö†Ô∏è Token expirado detectado proactivamente');
    
    try {
      await options.logout();
      console.log('‚úÖ Sesi√≥n cerrada por token expirado');
      
      router.replace(options.redirectTo || '/login');
      return true; // Token estaba expirado y se manej√≥
    } catch (error) {
      console.error('‚ùå Error cerrando sesi√≥n por token expirado:', error);
      router.replace(options.redirectTo || '/login');
      return true;
    }
  }

  return false; // Token no estaba expirado
}

// Funci√≥n para obtener un mensaje de error amigable
export function getAuthErrorMessage(error: any): string {
  if (error instanceof ApiException) {
    switch (error.status) {
      case 401:
        return 'Tu sesi√≥n ha expirado. Por favor, inicia sesi√≥n nuevamente.';
      case 403:
        return 'No tienes permisos para realizar esta acci√≥n.';
      case 404:
        return 'El recurso solicitado no fue encontrado.';
      case 500:
        return 'Error interno del servidor. Int√©ntalo m√°s tarde.';
      default:
        return error.detail || 'Error desconocido del servidor.';
    }
  }

  if (error instanceof Error) {
    return error.message;
  }

  return 'Error desconocido. Int√©ntalo nuevamente.';
}

// Funci√≥n para crear un manejador de errores reutilizable
export function createAuthErrorHandler(options: AuthErrorHandlerOptions) {
  return async (error: any): Promise<boolean> => {
    return handleAuthError(error, options);
  };
} 